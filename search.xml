<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>常用php库</title>
      <link href="//articles/php-library.html"/>
      <url>//articles/php-library.html</url>
      
        <content type="html"><![CDATA[<h1 id="每个程序员都应该知道的15个最佳PHP库"><a href="#每个程序员都应该知道的15个最佳PHP库" class="headerlink" title="每个程序员都应该知道的15个最佳PHP库"></a>每个程序员都应该知道的15个最佳PHP库</h1><p>PHP是一种功能强大的web站点脚本语言，通过PHP，web网站开发者可以更容易地创建动态的引人入胜的web页面。开发人员可以使用PHP代码与一些网站模板和框架来提升功能和特性。然而，编写PHP代码是一个繁琐又耗时的过程。为了缩短开发时间，开发人员可以用PHP库替代编写代码来为站点添加功能。<br>PHP是一种功能强大的web站点脚本语言，通过PHP，web网站开发者可以更容易地创建动态的引人入胜的web页面。开发人员可以使用PHP代码与一些网站模板和框架来提升功能和特性。然而，编写PHP代码是一个繁琐又耗时的过程。为了缩短开发时间，开发人员可以用PHP库替代编写代码来为站点添加功能。</p><p>使用PHP库来取代编写代码，可以显着地降低网站的开发时间，从而开发人员可以将时间投入到网站设计等重要环节。</p><h4 id="今天我们要介绍的就是15个最佳的PHP库，它们将帮助网站开发人员轻松提高网站的功能，优化PHP的开发时间。"><a href="#今天我们要介绍的就是15个最佳的PHP库，它们将帮助网站开发人员轻松提高网站的功能，优化PHP的开发时间。" class="headerlink" title="今天我们要介绍的就是15个最佳的PHP库，它们将帮助网站开发人员轻松提高网站的功能，优化PHP的开发时间。"></a>今天我们要介绍的就是15个最佳的PHP库，它们将帮助网站开发人员轻松提高网站的功能，优化PHP的开发时间。</h4><h2 id="1-PChart"><a href="#1-PChart" class="headerlink" title="1. PChart"></a>1. PChart</h2><p>PChart是一个令人印象深刻的PHP库，可以以一种可视化图表的形式生成文本数据。数据可以展示为柱状图，饼状图，以及其他格式。使用SQL查询可以帮助PHP脚本创建令人惊叹的图表和图形。</p><h2 id="2-PHP-CAPTCHA"><a href="#2-PHP-CAPTCHA" class="headerlink" title="2. PHP CAPTCHA"></a>2. PHP CAPTCHA</h2><p>PHP CAPTCHA是另一个伟大的用于创建自动化音频和可视化CAPTCHA的PHP库。CAPTCHA系统是完全自动的使用图灵测试来完成区分人和机器人的挑战。 PHP库需要PHP 4以及编译的FreeType文本和GD 1或2图像生成的支持。</p><h2 id="3-Dispatch"><a href="#3-Dispatch" class="headerlink" title="3.Dispatch"></a>3.Dispatch</h2><p>Dispatch是一个简单的PHP库，可以定义URL规则以更好地组织网站。使用这个PHP库你可以匹配HTTP路径和要求，显示器等的特定类型。结合Dispatch和本文中列出的其他库，开发人员就能有一个强大而简单的工作设置。</p><h2 id="3-Services-JSON"><a href="#3-Services-JSON" class="headerlink" title="3. Services_JSON"></a>3. Services_JSON</h2><p>Services_JSON允许人脑可读数据的传输。 PHP库的最新版本为服务器传输数据提供了极大的便捷。</p><h2 id="4-phpAES"><a href="#4-phpAES" class="headerlink" title="4. phpAES"></a>4. phpAES</h2><p>phpAES是支持128，192和256位AES加密密码的一类实现PHP代码。当涉及到汇编成PHP的时候，你不需要其他的扩展。phpAES是全功能的，并且符合FIPS 197。</p><h2 id="5-ImageWorkshop"><a href="#5-ImageWorkshop" class="headerlink" title="5. ImageWorkshop"></a>5. ImageWorkshop</h2><p>ImageWorkshop是一个伟大的开源PHP库，允许你层次化地控制操作图像。使用PHP库，你可以裁剪、调整大小、添加水印、制作缩略图等以不同的方式处理图像。 PHP库还可以更容易地进一步加强在web网站上所使用的图像。</p><h2 id="6-Mink"><a href="#6-Mink" class="headerlink" title="6.Mink"></a>6.Mink</h2><p>Mink是另一个有用的PHP库，可以帮助你用互联网浏览器测试web页面的交互。该库删除了不同浏览器之间的API的差异，从而给开发人员提供更好的测试环境。</p><h2 id="7-PHP-Thumbnailer"><a href="#7-PHP-Thumbnailer" class="headerlink" title="7. PHP Thumbnailer"></a>7. PHP Thumbnailer</h2><p>PHP Thumbnailer是一个简单的图像处理PHP库，能够帮助生成缩略图。此库不需要再安装外部库。PHP Thumbnailer提供了对缩略图的多种控制，如根据高度、宽度、百分比调整缩略图大小，旋转图像，以及创建自定义的小图形，如正方形。</p><h2 id="8-Hoa"><a href="#8-Hoa" class="headerlink" title="8.Hoa"></a>8.Hoa</h2><p>Hoa是结构化，模块化，可扩展的PHP库，可创建研究和工业领域之间的链接。 此PHP库建议必不可少的范式、机制、算法，以确保web站点的可靠性。</p><h2 id="9-PHP-Text-to-Image"><a href="#9-PHP-Text-to-Image" class="headerlink" title="9. PHP Text to Image"></a>9. PHP Text to Image</h2><p>PHP Text to Image是一个可以将文本转换成图像的PHP库。在某些简单的情况下，如显示email地址作为不能以编程方式发现的图像的时候，这是很有用的。使用这个PHP库可以通过网络爬虫以及将它当作垃圾邮件来减少电子邮件地址泛滥。</p><h2 id="10-Faker"><a href="#10-Faker" class="headerlink" title="10.Faker"></a>10.Faker</h2><p>Faker是一个非常有用的PHP库，可以在需要时创建假数据。使用这个PHP库，你可以执行各种诸如匿名数据，引导数据库，创建XML文档，进行压力测试的任务。</p><h2 id="11-PHP-Image-Upload-Class"><a href="#11-PHP-Image-Upload-Class" class="headerlink" title="11.PHP Image Upload Class"></a>11.PHP Image Upload Class</h2><p>PHP Image Upload Class是一个功能强大的PHP库，可以简化上传图像到窗体表格的过程。通过这个库，开发人员可以使用文件输入命令上传图片。开发人员也可以在类之外定义用户消息，通过gettext或类似的命令，在本地提供帮助。</p><h2 id="12-Ratchet"><a href="#12-Ratchet" class="headerlink" title="12.Ratchet"></a>12.Ratchet</h2><p>使用Ratchet PHP库，web开发人员可以创建实时性以及在客户端和服务器之间双向性的应用程序。 这个PHP库能够帮助促进和创造事件驱动应用程序，而不是使用传统的HTTP请求。</p><h2 id="13-PHP-Export-XLS-Class"><a href="#13-PHP-Export-XLS-Class" class="headerlink" title="13. PHP Export XLS Class"></a>13. PHP Export XLS Class</h2><p>PHP Export XLS Class是一个轻量级的，快速又简单的PHP库，可以导出不同类型的数据到Excel中。它可以转换各种数据格式到.xls格式。此库还可工作于多个工作表，元数据（标题，作者，描述，等），不同的字体类型和风格，填充，单元格边框和渐变。开发人员也可以使用PHP扩展来添加图像到工作表中。</p><h2 id="14-phpDocumentor"><a href="#14-phpDocumentor" class="headerlink" title="14. phpDocumentor"></a>14. phpDocumentor</h2><p>phpDocumentor是一个很不错的自动文档工具，可以帮助我们创建一个使用PHP代码的专业文档。 该PHP库支持添加多种不同的功能到网站。一些由PHP库支持的增值功能，包括支持合并自定义文档——例如教程，链接文档，创建高亮源代码，功能交叉引用到PHP常规文档。 此PHP库可以帮助自动化文档。</p><h2 id="15-PHP-DB-Class"><a href="#15-PHP-DB-Class" class="headerlink" title="15. PHP DB Class"></a>15. PHP DB Class</h2><p>PHP DB Class是一个伟大的PHP库，可以帮助开发PHP和MySQL。该工具可轻松方便地访问一个数据库，并减少执行任务所需的代码数量。此外，此PHP库提供各种调试功能。例如，开发人员可以使用调试功能来显示请求和结果表，还可以通过添加参数到它的类的方法来执行此任务。</p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php 静态类与非静态类</title>
      <link href="//articles/static-class.html"/>
      <url>//articles/static-class.html</url>
      
        <content type="html"><![CDATA[<h1 id="静态类访问方法："><a href="#静态类访问方法：" class="headerlink" title="静态类访问方法："></a>静态类访问方法：</h1><p>1、，静态方法不需要实例化对象，可以通过类名直接调用，操作符为双冒号::<br>Car::getName();<br>2、外部访问公共属性或方法：<br>$car-&gt;speed;$car-&gt;speedUp();<br>3、内部访问公共属性和方法：<br>    $this-&gt;speed;$this-&gt;speedUp();<br>    if(empty($articleclass_id)) $this-&gt;showapp(array(‘msg’=&gt;’错误的操作’));<br>4、外部访问静态属性或方法：<br>    Car::getName();Car::$price;<br>    $articleclass_id = SUtil::getStr($_GET[‘id’], ‘int’);<br>5、内部访问静态属性：self::$price;<br>6、继承类时，子类内部调用父类静态属性：parent::$price;</p><pre class=" language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Controller_article</span> <span class="token keyword">extends</span> <span class="token class-name">Controller_basepage</span> <span class="token punctuation">{</span>      <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">parent</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span> </code></pre><p>7、 如果是非静态方法，需要改方法中没有使用$this，即没有调用非静态的变量/方法，当然，调用静态的变量/方法没有问题。</p><p>8、使用$object-&gt;… 和使用class::… 都有什么区别： </p><ul><li>使用$object-&gt;… ，需要执行构造函数创建对象； </li><li>使用class::… 调用静态方法/变量，不需要执行构造函数创建对象； </li><li>使用class::… 调用非静态方法/变量，也不需要执行构造函数创建对象。</li></ul><h4 id="为什么要有静态类？？？？？？？？"><a href="#为什么要有静态类？？？？？？？？" class="headerlink" title="为什么要有静态类？？？？？？？？"></a>为什么要有静态类？？？？？？？？</h4><h6 id="静态的变量或者是函数是保存的静态内存中的，只有到程序结束时才会被释放，那他是什么时候赋值的呢"><a href="#静态的变量或者是函数是保存的静态内存中的，只有到程序结束时才会被释放，那他是什么时候赋值的呢" class="headerlink" title="静态的变量或者是函数是保存的静态内存中的，只有到程序结束时才会被释放，那他是什么时候赋值的呢"></a>静态的变量或者是函数是保存的静态内存中的，只有到程序结束时才会被释放，那他是什么时候赋值的呢</h6><h6 id="是在编译的时候，动态类是在程序运行的时候动态分配的。"><a href="#是在编译的时候，动态类是在程序运行的时候动态分配的。" class="headerlink" title="是在编译的时候，动态类是在程序运行的时候动态分配的。"></a>是在编译的时候，动态类是在程序运行的时候动态分配的。</h6><h6 id="如果类中调用一次，静态类在编译的时候需要多做工作，动态类在执行的时候需要多做工作，然而php是动态语言，每一次这两步都不掉-所以对于只运行一次的类，无所谓谁快谁慢。"><a href="#如果类中调用一次，静态类在编译的时候需要多做工作，动态类在执行的时候需要多做工作，然而php是动态语言，每一次这两步都不掉-所以对于只运行一次的类，无所谓谁快谁慢。" class="headerlink" title="如果类中调用一次，静态类在编译的时候需要多做工作，动态类在执行的时候需要多做工作，然而php是动态语言，每一次这两步都不掉,所以对于只运行一次的类，无所谓谁快谁慢。"></a>如果类中调用一次，静态类在编译的时候需要多做工作，动态类在执行的时候需要多做工作，然而php是动态语言，每一次这两步都不掉,所以对于只运行一次的类，无所谓谁快谁慢。</h6><h6 id="但是如果一个类在程序当中要多次调用就不一样了，静态类是编译的时候就赋值了，程序之后的运行都可以直接调用过来，而不用动态的分配内存了，就节约了时间，这就是为什么静态类比动态类快的原因（前提是调用多次记得）。"><a href="#但是如果一个类在程序当中要多次调用就不一样了，静态类是编译的时候就赋值了，程序之后的运行都可以直接调用过来，而不用动态的分配内存了，就节约了时间，这就是为什么静态类比动态类快的原因（前提是调用多次记得）。" class="headerlink" title="但是如果一个类在程序当中要多次调用就不一样了，静态类是编译的时候就赋值了，程序之后的运行都可以直接调用过来，而不用动态的分配内存了，就节约了时间，这就是为什么静态类比动态类快的原因（前提是调用多次记得）。"></a>但是如果一个类在程序当中要多次调用就不一样了，静态类是编译的时候就赋值了，程序之后的运行都可以直接调用过来，而不用动态的分配内存了，就节约了时间，这就是为什么静态类比动态类快的原因（前提是调用多次记得）。</h6>]]></content>
      
      
      <categories>
          
          <category> 面向对象 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>phpstorm快捷键大全</title>
      <link href="//articles/phpstorm-shortcut-keys.html"/>
      <url>//articles/phpstorm-shortcut-keys.html</url>
      
        <content type="html"><![CDATA[<h6 id="PhPStorm-是-JetBrains-公司开发的一款商业的-PHP"><a href="#PhPStorm-是-JetBrains-公司开发的一款商业的-PHP" class="headerlink" title="PhPStorm 是 JetBrains 公司开发的一款商业的 PHP"></a>PhPStorm 是 JetBrains 公司开发的一款商业的 PHP</h6><h6 id="集成开发工具，PhpStorm可随时帮助用户对其编码进行调整，运行单元测试或者提供可视化debug功能。Phpstrom的一款名为Magicento的插件对快速创建Magento插件十分有用。"><a href="#集成开发工具，PhpStorm可随时帮助用户对其编码进行调整，运行单元测试或者提供可视化debug功能。Phpstrom的一款名为Magicento的插件对快速创建Magento插件十分有用。" class="headerlink" title="集成开发工具，PhpStorm可随时帮助用户对其编码进行调整，运行单元测试或者提供可视化debug功能。Phpstrom的一款名为Magicento的插件对快速创建Magento插件十分有用。"></a>集成开发工具，PhpStorm可随时帮助用户对其编码进行调整，运行单元测试或者提供可视化debug功能。Phpstrom的一款名为Magicento的插件对快速创建Magento插件十分有用。</h6><h1 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h1><p>设置快捷键：File -&gt; Settings -&gt; IDE Settings -&gt; Keymap -&gt; 选择“eclipse” -&gt; 然后“Copy”一份 -&gt; 再个性化设置（自己习惯的）快捷键</p><p>常用快捷键(keymaps:Default情况下)</p><h1 id="Esc键编辑器（从工具窗口）"><a href="#Esc键编辑器（从工具窗口）" class="headerlink" title="Esc键编辑器（从工具窗口）"></a>Esc键编辑器（从工具窗口）</h1><pre><code>F1   帮助 千万别按,很卡!F2（Shift+F2）  下/上高亮错误或警告快速定位F3   向下查找关键字出现位置F4   查找变量来源F5   复制文件/文件夹F6   移动F11  切换书签F12  返回到以前的工具窗口注意：部分快捷键，必须在没有更改快捷键的情况下才可以使用</code></pre><h1 id="查询快捷键"><a href="#查询快捷键" class="headerlink" title="查询快捷键"></a>查询快捷键</h1><pre><code>CTRL+N   查找类CTRL+SHIFT+N  查找文件，打开工程中的文件(类似于eclipse中的ctrl+shift+R)，目的是打开当前工程下任意目录的文件CTRL+SHIFT+ALT+N 查 找类中的方法或变量(JS)CIRL+B   找变量的来源，跳到变量申明处CTRL+ALT+B  找所有的子类CTRL+SHIFT+B  找变量的 类CTRL+G   定位行，跳转行CTRL+F   在当前窗口查找文本CTRL+SHIFT+F  在指定路径查找文本CTRL+R   当前窗口替换文本CTRL+SHIFT+R  在指定路径替换文本ALT+SHIFT+C  查找修改的文件，最近变更历史CTRL+E   最近打开的文件F3   查找下一个SHIFT+F3  查找上一个F4   查找变量来源CTRL+ALT+F7  选 中的字符 查找工程出现的地方ALT+F7 直接查询选中的字符Ctrl+F7  文件中查询选中字符自动代码ALT+回车  导入包,自动修正CTRL+ALT+L  格式化代码CTRL+ALT+I  自动缩进CTRL+ALT+O  优化导入的类和包CTRL+E  最近更改的文件/代码CTRL+SHIFT+SPACE 切换窗口CTRL+SPACE空格  代码自动完成，代码提示,一般与输入法冲突CTRL+ALT+SPACE  类 名或接口名提示（与系统冲突）CTRL+P   方法参数提示，显示默认参数CTRL+J   自动代码提示，自动补全CTRL+ALT+T  把选中的代码放在 TRY{} IF{} ELSE{} 里ALT+INSERT  生成代码(如GET,SET方法,构造函数等)复制快捷方式F5   复制文件/文件夹CTRL+C   复制CTRL+V   粘贴CTRL+X   剪 切,删除行CTRL+D   复制行Ctrl + Y    删除行插入符号CTRL+SHIFT+V  可以复制多个文本 </code></pre><h1 id="高亮"><a href="#高亮" class="headerlink" title="高亮"></a>高亮</h1><pre><code>CTRL+F   选中的文字,高亮显示 上下跳到下一个或者上一个F2（Shift+F2） 高亮错误或警告快速定位SHIFT+F2  高亮错误或警告快速定位CTRL+SHIFT+F7  高亮显示多个关键字. 本地历史VCS/SVNAlt +反引号（&#39;） 快速弹出VCS菜单Ctrl + K         提交项目VCSCtrl + T         更新项目从VCSAlt + Shift + C  查看最近发生的变化</code></pre><h1 id="其他快捷方式"><a href="#其他快捷方式" class="headerlink" title="其他快捷方式"></a>其他快捷方式</h1><pre><code>CTRL+Z        倒退(代码后悔)CTRL+SHIFT+Z  向前CTRL+H        显 示类结构图Ctrl +F12      文件结构弹出Ctrl+Shift+H  方法的层次结构Ctrl+Alt+H    呼叫层次CTRL+Q   显示代码注释CTRL+W   选中代码，连续按会 有其他效果Ctrl+Shift+W   减少当前选择到以前的状态CTRL+B   转到声明，快速打开光标处的类或方法说明注释(CTRL + 鼠标单击 也可以)CTRL+O   魔术方法CTRL+/   注释//取消注释  CTRL+SHIFT+/  注释/*...*/CTRL+ []   光标移动到 {}[]开头或结尾位置CTRL+SHIFT+[]    选中块代码，可以快速复制ctrl + &#39;-/+&#39;: 可以折叠项目中的任何代码块,包括htm中的任意nodetype=3的元素，function,或对象直接量等等。它不是选中折叠，而是自动识别折叠。ctrl + &#39;.&#39;: 折叠选中的代码的代码Ctrl+Shift+U   选中的字符大小写转换ctrl+shift+i      快速查看变量或方法定义源CTRL+ALT+F12  资源管理器打开文件夹，跳转至当前文件在磁盘上的位置ALT+F1   选择当前文件或菜单中的任何视图工具栏SHIFT+ALT+INSERT 竖编辑模式CTRL+ALT ←/→  返回上次编辑的位置ALT+ ←/→  切换代码视图，标签切换ALT+ ↑/↓  在方法间快速移动定位alt + &#39;7&#39;: 显示当前的类/函数结构。类似于eclipse中的outline的效果。试验了一下，要比aptana的给力一些，但还是不能完全显示prototype下面的方法名。SHIFT+F6  重命名,重构 当前区域内变量重命名/重构不但可以重命名文件名，而且可以命名函数名，函数名可以搜索引用的文件，还可以重命名局部变量。还可以重命名标签名。在sublime text中有个类似的快捷键：ctrl+shift+d。ctrl+shift+enter(智能完善代码 如 if()) ctrl+shift+up/down(移动行、合并选中行，代码选中区域 向上/下移动) CTRL+UP/DOWN  光标跳转到编辑器显示区第一行或最后一行下ESC   光标返回编辑框SHIFT+ESC  光 标返回编辑框,关闭无用的窗口CTRL+F4   关闭当前的编辑器或选项卡Ctrl + Alt + V引入变量Ctrl + Alt + F 类似引入变量Ctrl + Alt + C引入常量Ctrl + Tab   键切换选项卡和工具窗口Ctrl + Shift + A  查找快捷键Alt + ＃[0-9]      打开相应的工具窗口Ctrl + Shift + F12 切换最大化编辑器Alt + Shift + F    添加到收藏夹Alt + Shift + I    检查当前文件与当前的配置文件Ctrl +反引号（`）  快速切换目前的配色/代码方案/快捷键方案/界面方案Ctrl + Alt + S     打开设置对话框（与QQ冲突）</code></pre><h1 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h1><pre><code>Alt + Shift + F10  选择的配置和运行Alt + Shift + F9   选择配置和调试Shift + F10        运行Shift + F9调试Ctrl + Shift + F10运行范围内配置编辑器Ctrl + Shift + X运行命令行</code></pre><h1 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h1><pre><code>F8步过F7步入Shift + F7智能进入Shift + F8步骤ALT + F9运行到光标Alt + F8计算表达式F9恢复程序Ctrl + F8切换断点Ctrl + Shift + F8查看断点</code></pre><h1 id="导航"><a href="#导航" class="headerlink" title="导航"></a>导航</h1><pre><code>Shift + Esc键隐藏活动或最后一个激活的窗口Ctrl + Shift + F4关闭活动运行/消息/ / ...选项卡Ctrl + Shift + Backspace键导航到最后编辑的位置Ctrl + Alt+B   到实施（S）Ctrl + Shift+I  打开快速定义查询Ctrl + U        转到super-method/super-classAlt + Home      组合显示导航栏</code></pre><h1 id="书签"><a href="#书签" class="headerlink" title="书签"></a>书签</h1><pre><code>Ctrl + F11切换书签助记符Ctrl +＃[0-9]转到编号书签Shift + F11显示书签</code></pre><h1 id="编辑"><a href="#编辑" class="headerlink" title="编辑"></a>编辑</h1><pre><code>Ctrl + Q      快速文档查询ALT + INSERT  生成的代码...器（getter，setter方法，构造函数）Ctrl + O      覆盖方法Ctrl + I      实现方法Alt + Enter   显示意图的行动和快速修复Shift + Tab   键缩进/取消缩进选中的行Ctrl + Shift + J  智能线连接（仅适用于HTML和JavaScript）Ctrl + Enter      智能线分割（HTML和JavaScript）Shift + Enter     开始新的生产线Ctrl + Delete   删除字（word）Ctrl + Backspace删除字开始Ctrl +小键盘+ / - 展开/折叠代码块Ctrl + Shift +小键盘+展开全部Ctrl + Shift +数字键盘关闭全部</code></pre>]]></content>
      
      
      <categories>
          
          <category> 编辑器 快捷键 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> phpstorm </tag>
            
            <tag> 快捷键 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git常用命令使用大全</title>
      <link href="//articles/git-command.html"/>
      <url>//articles/git-command.html</url>
      
        <content type="html"><![CDATA[<h1 id="Git常用命令使用大全"><a href="#Git常用命令使用大全" class="headerlink" title="Git常用命令使用大全"></a>Git常用命令使用大全</h1><h3 id="查看、添加、提交、删除、找回，重置修改文件"><a href="#查看、添加、提交、删除、找回，重置修改文件" class="headerlink" title="查看、添加、提交、删除、找回，重置修改文件"></a>查看、添加、提交、删除、找回，重置修改文件</h3><pre><code>git help &lt;command&gt; # 显示command的helpgit add &lt;file&gt; # 将工作文件修改提交到本地暂存区git add . # 将所有修改过的工作文件提交暂存区git rm &lt;file&gt; # 从版本库中删除文件git rm &lt;file&gt; --cached # 从版本库中删除文件，但不删除文件git reset &lt;file&gt; # 从暂存区恢复到工作文件git reset -- . # 从暂存区恢复到工作文件git reset --hard # 恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改git revert &lt;$id&gt; # 恢复某次提交的状态，恢复动作本身也创建次提交对象git revert HEAD # 恢复最后一次提交的状态</code></pre><h3 id="查看文件diff"><a href="#查看文件diff" class="headerlink" title="查看文件diff"></a>查看文件diff</h3><pre><code>git diff &lt;file&gt; # 比较当前文件和暂存区文件差异 git diffgit diff &lt;id1&gt;&lt;id1&gt;&lt;id2&gt; # 比较两次提交之间的差异git diff &lt;branch1&gt;..&lt;branch2&gt; # 在两个分支之间比较git diff --staged # 比较暂存区和版本库差异git diff --cached # 比较暂存区和版本库差异git diff --stat # 仅仅比较统计信息</code></pre><h3 id="查看提交记录"><a href="#查看提交记录" class="headerlink" title="查看提交记录"></a>查看提交记录</h3><pre><code>git log git log &lt;file&gt; # 查看该文件每次提交记录git log -p &lt;file&gt; # 查看每次详细修改内容的diffgit log -p -2 # 查看最近两次详细修改内容的diffgit log --stat #查看提交统计信息tigMac上可以使用tig代替diff和log，brew install tig</code></pre><h3 id="Git-本地分支管理"><a href="#Git-本地分支管理" class="headerlink" title="Git 本地分支管理"></a>Git 本地分支管理</h3><h4 id="查看、切换、创建和删除分支"><a href="#查看、切换、创建和删除分支" class="headerlink" title="查看、切换、创建和删除分支"></a>查看、切换、创建和删除分支</h4><pre><code>git br -r # 查看远程分支git br &lt;new_branch&gt; # 创建新的分支git br -v # 查看各个分支最后提交信息git br --merged # 查看已经被合并到当前分支的分支git br --no-merged # 查看尚未被合并到当前分支的分支git co &lt;branch&gt; # 切换到某个分支git co -b &lt;new_branch&gt; # 创建新的分支，并且切换过去git co -b &lt;new_branch&gt; &lt;branch&gt; # 基于branch创建新的new_branchgit co $id # 把某次历史提交记录checkout出来，但无分支信息，切换到其他分支会自动删除git co $id -b &lt;new_branch&gt; # 把某次历史提交记录checkout出来，创建成一个分支git br -d &lt;branch&gt; # 删除某个分支git br -D &lt;branch&gt; # 强制删除某个分支 (未被合并的分支被删除的时候需要强制)</code></pre><h3 id="分支合并和rebase-分支合并和rebase"><a href="#分支合并和rebase-分支合并和rebase" class="headerlink" title="分支合并和rebase 分支合并和rebase"></a>分支合并和rebase 分支合并和rebase</h3><pre><code>git merge &lt;branch&gt; # 将branch分支合并到当前分支git merge origin/master --no-ff # 不要Fast-Foward合并，这样可以生成merge提交git rebase master &lt;branch&gt; # 将master rebase到branch，相当于： git co &lt;branch&gt; &amp;&amp; git rebase master &amp;&amp; git co master &amp;&amp; git merge &lt;branch&gt; Git补丁管理(方便在多台机器上开发同步时用)git diff &gt; ../sync.patch # 生成补丁git apply ../sync.patch # 打补丁git apply --check ../sync.patch #测试补丁能否成功</code></pre><h3 id="Git暂存管理-Git暂存管理"><a href="#Git暂存管理-Git暂存管理" class="headerlink" title="Git暂存管理 Git暂存管理"></a>Git暂存管理 Git暂存管理</h3><pre><code>git stash # 暂存git stash list # 列所有stashgit stash apply # 恢复暂存的内容git stash drop # 删除暂存区</code></pre><h3 id="Git远程分支管理"><a href="#Git远程分支管理" class="headerlink" title="Git远程分支管理"></a>Git远程分支管理</h3><pre><code>git pull # 抓取远程仓库所有分支更新并合并到本地git pull --no-ff # 抓取远程仓库所有分支更新并合并到本地，不要快进合并git fetch origin # 抓取远程仓库更新git merge origin/master # 将远程主分支合并到本地当前分支git co --track origin/branch # 跟踪某个远程分支创建相应的本地分支git co -b &lt;local_branch&gt; origin/&lt;remote_branch&gt; # 基于远程分支创建本地分支，功能同上git push # push所有分支git push origin master # 将本地主分支推到远程主分支git push -u origin master # 将本地主分支推到远程(如无远程主分支则创建，用于初始化远程仓库)git push origin &lt;local_branch&gt; # 创建远程分支， origin是远程仓库名git push origin &lt;local_branch&gt;:&lt;remote_branch&gt; # 创建远程分支git push origin :&lt;remote_branch&gt; #先删除本地分支(git br -d &lt;branch&gt;)，然后再push删除远程分支</code></pre><h3 id="Git远程仓库管理"><a href="#Git远程仓库管理" class="headerlink" title="Git远程仓库管理"></a>Git远程仓库管理</h3><pre><code>GitHubgit remote -v # 查看远程服务器地址和仓库名称git remote show origin # 查看远程服务器仓库状态git remote add origin git@ github:robbin/robbin_site.git # 添加远程仓库地址git remote set-url origin git@ github.com:robbin/robbin_site.git # 设置远程仓库地址(用于修改远程仓库地址) git remote rm &lt;repository&gt; # 删除远程仓库</code></pre><h3 id="创建远程仓库"><a href="#创建远程仓库" class="headerlink" title="创建远程仓库"></a>创建远程仓库</h3><pre><code>git clone --bare robbin_site robbin_site.git # 用带版本的项目创建纯版本仓库scp -r my_project.git git@ git.csdn.net:~ # 将纯仓库上传到服务器上mkdir robbin_site.git &amp;&amp; cd robbin_site.git &amp;&amp; git --bare init # 在服务器创建纯仓库git remote add origin git@ github.com:robbin/robbin_site.git # 设置远程仓库地址git push -u origin master # 客户端首次提交git push -u origin develop # 首次将本地develop分支提交到远程develop分支，并且trackgit remote set-head origin master # 设置远程仓库的HEAD指向master分支也可以命令设置跟踪远程库和本地库git branch --set-upstream master origin/mastergit branch --set-upstream develop origin/develop</code></pre>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高逼格程序员指南</title>
      <link href="//articles/article.html"/>
      <url>//articles/article.html</url>
      
        <content type="html"><![CDATA[<h1 id="一-开始准备工作"><a href="#一-开始准备工作" class="headerlink" title="一.开始准备工作"></a>一.开始准备工作</h1><h5 id="1-首先，你的电脑不一定要高配置，但是必须得是双屏，而且越大越好，如果能一个横屏一个竖屏那就更好了。这样，一个用来查资料，一个用来写代码。总之要显得信息量很大，效率特别高。"><a href="#1-首先，你的电脑不一定要高配置，但是必须得是双屏，而且越大越好，如果能一个横屏一个竖屏那就更好了。这样，一个用来查资料，一个用来写代码。总之要显得信息量很大，效率特别高。" class="headerlink" title="1. 首先，你的电脑不一定要高配置，但是必须得是双屏，而且越大越好，如果能一个横屏一个竖屏那就更好了。这样，一个用来查资料，一个用来写代码。总之要显得信息量很大，效率特别高。"></a>1. 首先，你的电脑不一定要高配置，但是必须得是双屏，而且越大越好，如果能一个横屏一个竖屏那就更好了。这样，一个用来查资料，一个用来写代码。总之要显得信息量很大，效率特别高。</h5><h5 id="2-别人要问你在哪学的PHP这么牛X，一定要说全是自学的！再吹个牛，什么语言都会，无师自通，不管什么编程语言三天就精通，记住，吹牛的时候千万不要眨眼睛。"><a href="#2-别人要问你在哪学的PHP这么牛X，一定要说全是自学的！再吹个牛，什么语言都会，无师自通，不管什么编程语言三天就精通，记住，吹牛的时候千万不要眨眼睛。" class="headerlink" title="2. 别人要问你在哪学的PHP这么牛X，一定要说全是自学的！再吹个牛，什么语言都会，无师自通，不管什么编程语言三天就精通，记住，吹牛的时候千万不要眨眼睛。"></a>2. 别人要问你在哪学的PHP这么牛X，一定要说全是自学的！再吹个牛，什么语言都会，无师自通，不管什么编程语言三天就精通，记住，吹牛的时候千万不要眨眼睛。</h5><h5 id="3-再次，你的椅子不一定要舒服，但是一定要可以半躺下。"><a href="#3-再次，你的椅子不一定要舒服，但是一定要可以半躺下。" class="headerlink" title="3.再次，你的椅子不一定要舒服，但是一定要可以半躺下。"></a>3.再次，你的椅子不一定要舒服，但是一定要可以半躺下。</h5><h5 id="4-然后，要有大量便签，最好是各种颜色的，用来记录每天要完成的事务。尽量沿着电脑屏幕边框贴满，这样，更能显出有很多事情的样子。"><a href="#4-然后，要有大量便签，最好是各种颜色的，用来记录每天要完成的事务。尽量沿着电脑屏幕边框贴满，这样，更能显出有很多事情的样子。" class="headerlink" title="4.然后，要有大量便签，最好是各种颜色的，用来记录每天要完成的事务。尽量沿着电脑屏幕边框贴满，这样，更能显出有很多事情的样子。"></a>4.然后，要有大量便签，最好是各种颜色的，用来记录每天要完成的事务。尽量沿着电脑屏幕边框贴满，这样，更能显出有很多事情的样子。</h5><h5 id="5-工具书，机械工业，orelly的，电子工业什么的都可以，能英文就英文，不行影印版的也可以，反正越厚越好，切记，千万不要放在书架上，一定要半打开状的堆在桌上。"><a href="#5-工具书，机械工业，orelly的，电子工业什么的都可以，能英文就英文，不行影印版的也可以，反正越厚越好，切记，千万不要放在书架上，一定要半打开状的堆在桌上。" class="headerlink" title="5.工具书，机械工业，orelly的，电子工业什么的都可以，能英文就英文，不行影印版的也可以，反正越厚越好，切记，千万不要放在书架上，一定要半打开状的堆在桌上。"></a>5.工具书，机械工业，orelly的，电子工业什么的都可以，能英文就英文，不行影印版的也可以，反正越厚越好，切记，千万不要放在书架上，一定要半打开状的堆在桌上。</h5><h1 id="二-从进门开始"><a href="#二-从进门开始" class="headerlink" title="二.从进门开始"></a>二.从进门开始</h1><h5 id="1-着装！着装！着装！（重要的事情说三遍）不管你是去实验室，还是去公司大楼，还是在小公司的民宅，还是在自己创业的黑作坊；无论春夏秋冬、白天晚上、刮风下雨、电闪雷鸣、台风龙卷风，一个高逼格的程序员都应该十分在意自己着装！这里提供给你几点专业的进阶建议，如："><a href="#1-着装！着装！着装！（重要的事情说三遍）不管你是去实验室，还是去公司大楼，还是在小公司的民宅，还是在自己创业的黑作坊；无论春夏秋冬、白天晚上、刮风下雨、电闪雷鸣、台风龙卷风，一个高逼格的程序员都应该十分在意自己着装！这里提供给你几点专业的进阶建议，如：" class="headerlink" title="1.着装！着装！着装！（重要的事情说三遍）不管你是去实验室，还是去公司大楼，还是在小公司的民宅，还是在自己创业的黑作坊；无论春夏秋冬、白天晚上、刮风下雨、电闪雷鸣、台风龙卷风，一个高逼格的程序员都应该十分在意自己着装！这里提供给你几点专业的进阶建议，如："></a>1.着装！着装！着装！（重要的事情说三遍）不管你是去实验室，还是去公司大楼，还是在小公司的民宅，还是在自己创业的黑作坊；无论春夏秋冬、白天晚上、刮风下雨、电闪雷鸣、台风龙卷风，一个高逼格的程序员都应该十分在意自己着装！这里提供给你几点专业的进阶建议，如：</h5><h6 id="●-初级装：衬衣-牛仔裤-休闲鞋。"><a href="#●-初级装：衬衣-牛仔裤-休闲鞋。" class="headerlink" title="● 初级装：衬衣+牛仔裤+休闲鞋。"></a>● 初级装：衬衣+牛仔裤+休闲鞋。</h6><h6 id="●-中级装：T恤-宽松短裤-拖鞋。"><a href="#●-中级装：T恤-宽松短裤-拖鞋。" class="headerlink" title="● 中级装：T恤+宽松短裤+拖鞋。"></a>● 中级装：T恤+宽松短裤+拖鞋。</h6><h6 id="●-高级装：背心-宽松-大花裤衩-人字拖。"><a href="#●-高级装：背心-宽松-大花裤衩-人字拖。" class="headerlink" title="● 高级装：背心+宽松 大花裤衩+人字拖。"></a>● 高级装：背心+宽松 大花裤衩+人字拖。</h6><h5 id="2-举止得体。在走廊或者过道里时，一定要双手插兜，走起路来要像个痞子，即使学的不太像，至少也要看起来有点反社会的气质，如若不行，可试着走文弱天才型geek路线……"><a href="#2-举止得体。在走廊或者过道里时，一定要双手插兜，走起路来要像个痞子，即使学的不太像，至少也要看起来有点反社会的气质，如若不行，可试着走文弱天才型geek路线……" class="headerlink" title="2.举止得体。在走廊或者过道里时，一定要双手插兜，走起路来要像个痞子，即使学的不太像，至少也要看起来有点反社会的气质，如若不行，可试着走文弱天才型geek路线……"></a>2.举止得体。在走廊或者过道里时，一定要双手插兜，走起路来要像个痞子，即使学的不太像，至少也要看起来有点反社会的气质，如若不行，可试着走文弱天才型geek路线……</h5><h5 id="3-如果有女生在你背后指指点点，小声嘀咕些什么的时候后，你要先低头，然后保持低头状态，再缓缓回头，坏坏地蔑笑但不要出声，然后快步走开。"><a href="#3-如果有女生在你背后指指点点，小声嘀咕些什么的时候后，你要先低头，然后保持低头状态，再缓缓回头，坏坏地蔑笑但不要出声，然后快步走开。" class="headerlink" title="3.如果有女生在你背后指指点点，小声嘀咕些什么的时候后，你要先低头，然后保持低头状态，再缓缓回头，坏坏地蔑笑但不要出声，然后快步走开。"></a>3.如果有女生在你背后指指点点，小声嘀咕些什么的时候后，你要先低头，然后保持低头状态，再缓缓回头，坏坏地蔑笑但不要出声，然后快步走开。</h5><h5 id="4-进门后，记住不要跟任何人打招呼，笔直走向自己的位置，最多路过咖啡机时，就打一杯咖啡，但接下来不要有多余的动作，这样能显示出自己的专注与心无旁骛。"><a href="#4-进门后，记住不要跟任何人打招呼，笔直走向自己的位置，最多路过咖啡机时，就打一杯咖啡，但接下来不要有多余的动作，这样能显示出自己的专注与心无旁骛。" class="headerlink" title="4.进门后，记住不要跟任何人打招呼，笔直走向自己的位置，最多路过咖啡机时，就打一杯咖啡，但接下来不要有多余的动作，这样能显示出自己的专注与心无旁骛。"></a>4.进门后，记住不要跟任何人打招呼，笔直走向自己的位置，最多路过咖啡机时，就打一杯咖啡，但接下来不要有多余的动作，这样能显示出自己的专注与心无旁骛。</h5><h1 id="三-坐下就不要再动了"><a href="#三-坐下就不要再动了" class="headerlink" title="三.坐下就不要再动了"></a>三.坐下就不要再动了</h1><h5 id="1-坐下以后，姿势需要略微后仰。这个程序检验的方式是能翘着二郎腿最好了，然后在后仰的情况下低着头，以便看到屏幕，保持这个姿势一直到下班。"><a href="#1-坐下以后，姿势需要略微后仰。这个程序检验的方式是能翘着二郎腿最好了，然后在后仰的情况下低着头，以便看到屏幕，保持这个姿势一直到下班。" class="headerlink" title="1.坐下以后，姿势需要略微后仰。这个程序检验的方式是能翘着二郎腿最好了，然后在后仰的情况下低着头，以便看到屏幕，保持这个姿势一直到下班。"></a>1.坐下以后，姿势需要略微后仰。这个程序检验的方式是能翘着二郎腿最好了，然后在后仰的情况下低着头，以便看到屏幕，保持这个姿势一直到下班。</h5><h5 id="2-粗暴地把电脑前的大堆书推开一个口，要显得男人一点儿。然后摘下电脑-上的一个便签，看一眼，记住，不要超过3秒。现在可以开始coding了"><a href="#2-粗暴地把电脑前的大堆书推开一个口，要显得男人一点儿。然后摘下电脑-上的一个便签，看一眼，记住，不要超过3秒。现在可以开始coding了" class="headerlink" title="2.粗暴地把电脑前的大堆书推开一个口，要显得男人一点儿。然后摘下电脑 上的一个便签，看一眼，记住，不要超过3秒。现在可以开始coding了"></a>2.粗暴地把电脑前的大堆书推开一个口，要显得男人一点儿。然后摘下电脑 上的一个便签，看一眼，记住，不要超过3秒。现在可以开始coding了</h5><h5 id="3-能不用IDE就不要用。如果实在装不了，无论IDE是什么，一定要调成DOS那-种黑色背景的，这点很重要。"><a href="#3-能不用IDE就不要用。如果实在装不了，无论IDE是什么，一定要调成DOS那-种黑色背景的，这点很重要。" class="headerlink" title="3.能不用IDE就不要用。如果实在装不了，无论IDE是什么，一定要调成DOS那 种黑色背景的，这点很重要。"></a>3.能不用IDE就不要用。如果实在装不了，无论IDE是什么，一定要调成DOS那 种黑色背景的，这点很重要。</h5><h5 id="4-千万不要用IM工具交流，千万不要问同事问题，显得自己没有水平，都是自己上网或者查书。"><a href="#4-千万不要用IM工具交流，千万不要问同事问题，显得自己没有水平，都是自己上网或者查书。" class="headerlink" title="4.千万不要用IM工具交流，千万不要问同事问题，显得自己没有水平，都是自己上网或者查书。"></a>4.千万不要用IM工具交流，千万不要问同事问题，显得自己没有水平，都是自己上网或者查书。</h5><h1 id="四-一定用高端，不管实用不实用"><a href="#四-一定用高端，不管实用不实用" class="headerlink" title="四.一定用高端，不管实用不实用"></a>四.一定用高端，不管实用不实用</h1><h5 id="1-如果写前台界面，就不停地调试后台代码；如果写Java，就在里面混编C；-如果写C，就在里面混编汇编。不光要coding，还要时不时的翻出一本什么英-文的书翻一翻，看不懂就看看插图，然后扔到面前，假装懂了继续coding。"><a href="#1-如果写前台界面，就不停地调试后台代码；如果写Java，就在里面混编C；-如果写C，就在里面混编汇编。不光要coding，还要时不时的翻出一本什么英-文的书翻一翻，看不懂就看看插图，然后扔到面前，假装懂了继续coding。" class="headerlink" title="1.如果写前台界面，就不停地调试后台代码；如果写Java，就在里面混编C； 如果写C，就在里面混编汇编。不光要coding，还要时不时的翻出一本什么英 文的书翻一翻，看不懂就看看插图，然后扔到面前，假装懂了继续coding。"></a>1.如果写前台界面，就不停地调试后台代码；如果写Java，就在里面混编C； 如果写C，就在里面混编汇编。不光要coding，还要时不时的翻出一本什么英 文的书翻一翻，看不懂就看看插图，然后扔到面前，假装懂了继续coding。</h5><h5 id="2-比如C-：switch统统重构成多态；如果有指针，统统改成智能的；C-一定要自己写-template；数字是全部要替换成宏的名字能起多长就起多长；struct就不要出现了，如果出现，也一定要用attriburte修饰一下；运算都是位操作的；操作符都是重载的；网络都是并发缓冲线程池的；int只用int32-t声明的-继承不用普通的，什么多继承虚继承-啊；helloworld也要写捕获异常的；后人一看代码，中间一堆关键字-extern-asm-auto-XXXXX-cast-volatile-explicit-register-template，让一般总在敲-int-if-else-for的小程序员顿时心生崇拜。"><a href="#2-比如C-：switch统统重构成多态；如果有指针，统统改成智能的；C-一定要自己写-template；数字是全部要替换成宏的名字能起多长就起多长；struct就不要出现了，如果出现，也一定要用attriburte修饰一下；运算都是位操作的；操作符都是重载的；网络都是并发缓冲线程池的；int只用int32-t声明的-继承不用普通的，什么多继承虚继承-啊；helloworld也要写捕获异常的；后人一看代码，中间一堆关键字-extern-asm-auto-XXXXX-cast-volatile-explicit-register-template，让一般总在敲-int-if-else-for的小程序员顿时心生崇拜。" class="headerlink" title="2.比如C++：switch统统重构成多态；如果有指针，统统改成智能的；C++一定要自己写 template；数字是全部要替换成宏的名字能起多长就起多长；struct就不要出现了，如果出现，也一定要用attriburte修饰一下；运算都是位操作的；操作符都是重载的；网络都是并发缓冲线程池的；int只用int32_t声明的;继承不用普通的，什么多继承虚继承 啊；helloworld也要写捕获异常的；后人一看代码，中间一堆关键字 extern,asm,auto,XXXXX_cast,volatile,explicit,register,template，让一般总在敲 int,if,else,for的小程序员顿时心生崇拜。"></a>2.比如C++：switch统统重构成多态；如果有指针，统统改成智能的；C++一定要自己写 template；数字是全部要替换成宏的名字能起多长就起多长；struct就不要出现了，如果出现，也一定要用<strong>attriburte</strong>修饰一下；运算都是位操作的；操作符都是重载的；网络都是并发缓冲线程池的；int只用int32_t声明的;继承不用普通的，什么多继承虚继承 啊；helloworld也要写捕获异常的；后人一看代码，中间一堆关键字 extern,asm,auto,XXXXX_cast,volatile,explicit,register,template，让一般总在敲 int,if,else,for的小程序员顿时心生崇拜。</h5><h5 id="3-想写注释？算了吧。只有两个路线可以选：一，变量名起得巨长无比，看-代码就和读英文文章一样顺畅，根本不需要加注释。-二，代码无比晦涩，加-不加注释根本无影响。"><a href="#3-想写注释？算了吧。只有两个路线可以选：一，变量名起得巨长无比，看-代码就和读英文文章一样顺畅，根本不需要加注释。-二，代码无比晦涩，加-不加注释根本无影响。" class="headerlink" title="3.想写注释？算了吧。只有两个路线可以选：一，变量名起得巨长无比，看 代码就和读英文文章一样顺畅，根本不需要加注释。 二，代码无比晦涩，加 不加注释根本无影响。"></a>3.想写注释？算了吧。只有两个路线可以选：一，变量名起得巨长无比，看 代码就和读英文文章一样顺畅，根本不需要加注释。 二，代码无比晦涩，加 不加注释根本无影响。</h5><h1 id="五-最后潇洒地离开"><a href="#五-最后潇洒地离开" class="headerlink" title="五.最后潇洒地离开"></a>五.最后潇洒地离开</h1><h5 id="1-无论是同事间开玩笑或者发生任何群体性时间，不要抬头，更不要东张西-望，即使地震火灾，也一定要先提交代码再行离开。"><a href="#1-无论是同事间开玩笑或者发生任何群体性时间，不要抬头，更不要东张西-望，即使地震火灾，也一定要先提交代码再行离开。" class="headerlink" title="1.无论是同事间开玩笑或者发生任何群体性时间，不要抬头，更不要东张西 望，即使地震火灾，也一定要先提交代码再行离开。"></a>1.无论是同事间开玩笑或者发生任何群体性时间，不要抬头，更不要东张西 望，即使地震火灾，也一定要先提交代码再行离开。</h5><h5 id="2-人走，主机是绝对不能关的。至少要跑个daily-build，实在不行正在svn-提交也勉强算过关，而且要保证周末也能正常运行。"><a href="#2-人走，主机是绝对不能关的。至少要跑个daily-build，实在不行正在svn-提交也勉强算过关，而且要保证周末也能正常运行。" class="headerlink" title="2.人走，主机是绝对不能关的。至少要跑个daily build，实在不行正在svn 提交也勉强算过关，而且要保证周末也能正常运行。"></a>2.人走，主机是绝对不能关的。至少要跑个daily build，实在不行正在svn 提交也勉强算过关，而且要保证周末也能正常运行。</h5><h5 id="3-《从入门到放弃》或者《颈椎康复指南》已经又堆到屏幕前了，千万不要-整理，一定要显得博学多识。"><a href="#3-《从入门到放弃》或者《颈椎康复指南》已经又堆到屏幕前了，千万不要-整理，一定要显得博学多识。" class="headerlink" title="3.《从入门到放弃》或者《颈椎康复指南》已经又堆到屏幕前了，千万不要 整理，一定要显得博学多识。"></a>3.《从入门到放弃》或者《颈椎康复指南》已经又堆到屏幕前了，千万不要 整理，一定要显得博学多识。</h5><h5 id="4-加班是必须的，不一定要在技术部最后一个走，但一定要让前台啊，市场-啊，尤其是PM都走了，你才可以走。"><a href="#4-加班是必须的，不一定要在技术部最后一个走，但一定要让前台啊，市场-啊，尤其是PM都走了，你才可以走。" class="headerlink" title="4.加班是必须的，不一定要在技术部最后一个走，但一定要让前台啊，市场 啊，尤其是PM都走了，你才可以走。"></a>4.加班是必须的，不一定要在技术部最后一个走，但一定要让前台啊，市场 啊，尤其是PM都走了，你才可以走。</h5><h5 id="5-走得时候一定要率性，简单。千万不要收拾任何东西。站起来，走出去，-好的，就这样。"><a href="#5-走得时候一定要率性，简单。千万不要收拾任何东西。站起来，走出去，-好的，就这样。" class="headerlink" title="5.走得时候一定要率性，简单。千万不要收拾任何东西。站起来，走出去， 好的，就这样。"></a>5.走得时候一定要率性，简单。千万不要收拾任何东西。站起来，走出去， 好的，就这样。</h5><h5 id="6-如果走的时候，一定要说句话的话，那就找到那个最苦逼的人，跟他说：你进度太慢了啊，不要老让我等你。"><a href="#6-如果走的时候，一定要说句话的话，那就找到那个最苦逼的人，跟他说：你进度太慢了啊，不要老让我等你。" class="headerlink" title="6.如果走的时候，一定要说句话的话，那就找到那个最苦逼的人，跟他说：你进度太慢了啊，不要老让我等你。"></a>6.如果走的时候，一定要说句话的话，那就找到那个最苦逼的人，跟他说：你进度太慢了啊，不要老让我等你。</h5>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
